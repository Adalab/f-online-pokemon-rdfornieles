{"version":3,"sources":["images/PokemonLogo.png","components/PokeList/index.js","components/SearchText/index.js","App.js","components/Services/PokeApi.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PokeList","listPoke","this","props","react_default","a","createElement","className","map","item","index","key","id","name","src","img","alt","type","Component","SearchText","_this$props","getValue","valueName","htmlFor","onChange","placeholder","value","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","poke","bind","assertThisInitialized","filterName","callApiPokemon","_this2","fetch","then","response","json","data","urlPoke","results","url","i","length","dataUrl","typePoke","types","push","Pokemon","sprites","front_default","Pokemons","setState","e","nameValue","currentTarget","_this3","filter","includes","toLowerCase","PokemonLogo","components_SearchText","components_PokeList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iRC2CzBC,gMArCF,IACGC,EAAaC,KAAKC,MAAlBF,SAER,OACIG,EAAAC,EAAAC,cAAA,WACMF,EAAAC,EAAAC,cAAA,MAAIC,UAAY,aACbN,EAASO,IAAI,SAACC,EAAMC,GACjB,OACIN,EAAAC,EAAAC,cAAA,MAAIC,UAAY,UAAUI,IAAOD,EAAOE,GAAMH,EAAKG,IACnDR,EAAAC,EAAAC,cAAA,MAAIC,UAAY,aAAaE,EAAKI,MAClCT,EAAAC,EAAAC,cAAA,QAAMC,UAAY,gBACdH,EAAAC,EAAAC,cAAA,KAAGC,UAAY,WAAf,OAA8BE,EAAKG,KAEvCR,EAAAC,EAAAC,cAAA,OAAKC,UAAY,WAAWO,IAAOL,EAAKM,IAAKC,IAAM,mBACnDZ,EAAAC,EAAAC,cAAA,OAAKC,UAAY,kBACZE,EAAKQ,KAAKT,IAAI,SAACC,EAAMC,GACtB,OACIN,EAAAC,EAAAC,cAAA,KAAGC,UAAW,YAAYI,IAAOD,GAChCD,kBApBdS,cCqBRC,0LApBF,IAAAC,EAC2BlB,KAAKC,MAA7BkB,EADHD,EACGC,SAAUC,EADbF,EACaE,UAElB,OACIlB,EAAAC,EAAAC,cAAA,QAAMC,UAAY,mBACZH,EAAAC,EAAAC,cAAA,SAAOC,UAAY,cAAcgB,QAAQ,QAAzC,oBACEnB,EAAAC,EAAAC,cAAA,SACIC,UAAU,aACVK,GAAG,OACHY,SAAUH,EACVI,YAAY,mBACZR,KAAK,OACLJ,KAAK,OACLa,MAAOJ,YAfNJ,8BC+FVS,cA1Fb,SAAAA,EAAYxB,GAAO,IAAAyB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA3B,KAAAyB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAA3B,KAAA2B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA/B,KAAMC,KACD+B,MAAQ,CACXC,KAAM,GACNtB,KAAM,IAGRe,EAAKP,SAAWO,EAAKP,SAASe,KAAdP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAChBA,EAAKU,WAAaV,EAAKU,WAAWF,KAAhBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KARDA,mFAYjB1B,KAAKqC,0DAGU,IAAAC,EAAAtC,KCrBGuC,MAFV,+CAEqBC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SDsB7CF,KAAK,SAAAG,GAOb,IAJA,IAAMC,EAAUD,EAAKE,QAAQvC,IAAI,SAAAC,GAC/B,OAAOA,EAAKuC,MAGLC,EAAI,EAAGA,EAAIH,EAAQI,OAAQD,IAClCR,MAAMK,EAAQG,IACXP,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAS,GAKJ,IADA,IAAMC,EAAW,GACRH,EAAI,EAAGA,EAAIE,EAAQE,MAAMH,OAAQD,IACxCG,EAASE,KAAKH,EAAQE,MAAMJ,GAAGhC,KAAjB,MAGhB,IAAMsC,EAAU,CACd1C,KAAMsC,EAAQtC,KACdD,GAAIuC,EAAQvC,GACZG,IAAKoC,EAAQK,QAAQC,cACrBxC,KAAMmC,GAIFM,EAAWlB,EAAKN,MAAMC,KAC5BuB,EAASJ,KAAKC,GACdf,EAAKmB,SAAS,CACZxB,KAAMuB,yCAQTE,GACP,IAAMC,EAAYD,EAAEE,cAAcpC,MAClCxB,KAAKyD,SAAS,CACZ9C,KAAMgD,yCAIE,IAAAE,EAAA7D,KACR,OAAOA,KAAKgC,MAAMC,KAAK6B,OAAO,SAAAvD,GAE9B,OADiBA,EAAKI,KACNoD,SAASF,EAAK7B,MAAMrB,KAAKqD,kDAM3C,OACE9D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,cAEEF,EAAAC,EAAAC,cAAA,OAAKC,UAAY,YAAYO,IAAOqD,IAAanD,IAAM,iBACvDZ,EAAAC,EAAAC,cAAC8D,EAAD,CACE/C,SAAUnB,KAAKmB,SACfC,UAAWpB,KAAKgC,MAAMrB,QAI1BT,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAC+D,EAAD,CAAUpE,SAAYC,KAAKoC,wBAnFnBpB,aEKEoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxE,EAAAC,EAAAC,cAACuE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxC,KAAK,SAAAyC,GACjCA,EAAaC","file":"static/js/main.0502c781.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/PokemonLogo.ddd5084d.png\";","import React, { Component } from 'react';\nimport './PokeList.scss';\nimport PropTypes from 'prop-types';\n\nclass PokeList extends Component {\n    \n    render() { \n        const { listPoke } = this.props\n        //console.log('holi',listPoke);\n        return ( \n            <div>\n                { <ul className = \"poke-list\">\n                    {listPoke.map((item, index) => {\n                        return (\n                            <li className = \"pokemon\" key = {index} id = {item.id}>\n                            <h2 className = \"poke-name\">{item.name}</h2>\n                            <span className = \"container-id\">\n                                <p className = \"poke-id\">ID: {item.id}</p>\n                            </span>\n                            <img className = \"poke-img\" src = {item.img} alt = \"Imagen Pokemon\"/>\n                            <div className = \"container-type\" >\n                                {item.type.map((item, index) => {\n                                return (\n                                    <p className= \"poke-type\" key = {index}>\n                                    {item}\n                                    </p>\n                                )\n                            })}\n                            </div>\n                           \n                            </li>\n                        )\n                    })}\n                </ul> }\n            </div>\n         );\n    }\n}\n\nPokeList.propTypes = {\n    listPoke: PropTypes.array.isRequired\n}\n \nexport default PokeList;","import React, { Component } from 'react';\nimport './SearchText.scss';\n\nclass SearchText extends Component {\n   \n    render() { \n        const { getValue, valueName } = this.props;\n\n        return ( \n            <span className = \"container-input\">\n                  <label className = \"input-title\" htmlFor=\"name\">Busca por nombre</label>\n                    <input\n                        className=\"input-name\"\n                        id=\"name\"\n                        onChange={getValue}\n                        placeholder=\"Ejemplo: Pikachu\"\n                        type=\"text\"\n                        name=\"name\"\n                        value={valueName}\n                    />\n            </span>\n         );\n    }\n}\n \nexport default SearchText;","import React, { Component } from 'react';\nimport './App.css';\nimport { callApi } from './components/Services/PokeApi';\nimport PokeList from './components/PokeList';\nimport SearchText from './components/SearchText';\nimport PokemonLogo from './images/PokemonLogo.png';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      poke: [],\n      name: \"\"\n    }\n\n    this.getValue = this.getValue.bind(this);\n    this.filterName = this.filterName.bind(this);\n  };\n\n  componentDidMount(){\n    this.callApiPokemon()\n  }\n\n  callApiPokemon() {\n    callApi().then(data => {\n      //console.log(data.results);\n      //map para sacar la url que me da la api\n      const urlPoke = data.results.map(item => {\n        return item.url;\n      });\n      //for y fetch para que me de la info de la url\n      for (let i = 0; i < urlPoke.length; i++) {\n        fetch(urlPoke[i])\n          .then(response => response.json())\n          .then(dataUrl =>{\n            //console.log(dataUrl);\n\n            //arr vac√≠o para meter los tipos con el siguiente for\n            const typePoke = [];\n            for (let i = 0; i < dataUrl.types.length; i++) {\n              typePoke.push(dataUrl.types[i].type[\"name\"]);\n            }\n            //const para meter todos los datos que quiero pintar\n            const Pokemon = {\n              name: dataUrl.name,\n              id: dataUrl.id,\n              img: dataUrl.sprites.front_default,\n              type: typePoke\n            }\n            //console.log(Pokemon)\n            //push para meter la info en el estado\n            const Pokemons = this.state.poke;\n            Pokemons.push(Pokemon)\n            this.setState({\n              poke: Pokemons\n            })\n\n          })\n      }\n    })\n  }\n\n  getValue(e) {\n    const nameValue = e.currentTarget.value;\n    this.setState({\n      name: nameValue\n    })\n  }\n\n  filterName(){\n      return this.state.poke.filter(item =>{\n      const pokeName = item.name;\n      return pokeName.includes(this.state.name.toLowerCase());\n    });\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          {/* <h1 className = \"title-app\">Pokemon App</h1> */}\n          <img className = \"title-app\" src = {PokemonLogo} alt = \"Logo Pokemon\"/>\n          <SearchText\n            getValue={this.getValue}\n            valueName={this.state.name}\n          />\n        </header>\n\n        <main>\n          <PokeList listPoke = {this.filterName()}/>\n        </main>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const API = \"https://pokeapi.co/api/v2/pokemon/?limit=25\";\n\nconst callApi = () => fetch(API).then(response => response.json());\n\nexport { callApi };","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}